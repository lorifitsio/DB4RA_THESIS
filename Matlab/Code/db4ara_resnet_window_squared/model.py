#    This file was created by
#    MATLAB Deep Learning Toolbox Converter for TensorFlow Models.
#    07-Apr-2025 16:55:45

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

def create_model():
    data = keras.Input(shape=(512,64,1))
    conv1 = layers.Conv2D(64, (32,8), strides=(16,8), name="conv1_")(data)
    bn_conv1 = layers.BatchNormalization(epsilon=0.000010, name="bn_conv1_")(conv1)
    conv1_relu = layers.ReLU()(bn_conv1)
    pool1_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(conv1_relu)
    pool1 = layers.MaxPool2D(pool_size=(2,2), strides=(1,1))(pool1_prepadded)
    res2a_branch2a_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(pool1)
    res2a_branch2a = layers.Conv2D(64, (3,3), name="res2a_branch2a_")(res2a_branch2a_prepadded)
    bn2a_branch2a = layers.BatchNormalization(epsilon=0.000010, name="bn2a_branch2a_")(res2a_branch2a)
    res2a_branch2a_relu = layers.ReLU()(bn2a_branch2a)
    res2a_branch2b_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res2a_branch2a_relu)
    res2a_branch2b = layers.Conv2D(64, (3,3), name="res2a_branch2b_")(res2a_branch2b_prepadded)
    bn2a_branch2b = layers.BatchNormalization(epsilon=0.000010, name="bn2a_branch2b_")(res2a_branch2b)
    res2a = layers.Add()([bn2a_branch2b, pool1])
    res2a_relu = layers.ReLU()(res2a)
    res2b_branch2a_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res2a_relu)
    res2b_branch2a = layers.Conv2D(64, (3,3), name="res2b_branch2a_")(res2b_branch2a_prepadded)
    bn2b_branch2a = layers.BatchNormalization(epsilon=0.000010, name="bn2b_branch2a_")(res2b_branch2a)
    res2b_branch2a_relu = layers.ReLU()(bn2b_branch2a)
    res2b_branch2b_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res2b_branch2a_relu)
    res2b_branch2b = layers.Conv2D(64, (3,3), name="res2b_branch2b_")(res2b_branch2b_prepadded)
    bn2b_branch2b = layers.BatchNormalization(epsilon=0.000010, name="bn2b_branch2b_")(res2b_branch2b)
    res2b = layers.Add()([bn2b_branch2b, res2a_relu])
    res2b_relu = layers.ReLU()(res2b)
    res3a_branch2a_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res2b_relu)
    res3a_branch2a = layers.Conv2D(128, (3,3), strides=(2,2), name="res3a_branch2a_")(res3a_branch2a_prepadded)
    bn3a_branch2a = layers.BatchNormalization(epsilon=0.000010, name="bn3a_branch2a_")(res3a_branch2a)
    res3a_branch2a_relu = layers.ReLU()(bn3a_branch2a)
    res3a_branch2b_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res3a_branch2a_relu)
    res3a_branch2b = layers.Conv2D(128, (3,3), name="res3a_branch2b_")(res3a_branch2b_prepadded)
    bn3a_branch2b = layers.BatchNormalization(epsilon=0.000010, name="bn3a_branch2b_")(res3a_branch2b)
    res3a_branch1 = layers.Conv2D(128, (1,1), strides=(2,2), name="res3a_branch1_")(res2b_relu)
    bn3a_branch1 = layers.BatchNormalization(epsilon=0.000010, name="bn3a_branch1_")(res3a_branch1)
    res3a = layers.Add()([bn3a_branch2b, bn3a_branch1])
    res3a_relu = layers.ReLU()(res3a)
    res3b_branch2a_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res3a_relu)
    res3b_branch2a = layers.Conv2D(128, (3,3), name="res3b_branch2a_")(res3b_branch2a_prepadded)
    bn3b_branch2a = layers.BatchNormalization(epsilon=0.000010, name="bn3b_branch2a_")(res3b_branch2a)
    res3b_branch2a_relu = layers.ReLU()(bn3b_branch2a)
    res3b_branch2b_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res3b_branch2a_relu)
    res3b_branch2b = layers.Conv2D(128, (3,3), name="res3b_branch2b_")(res3b_branch2b_prepadded)
    bn3b_branch2b = layers.BatchNormalization(epsilon=0.000010, name="bn3b_branch2b_")(res3b_branch2b)
    res3b = layers.Add()([bn3b_branch2b, res3a_relu])
    res3b_relu = layers.ReLU()(res3b)
    res4a_branch2a_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res3b_relu)
    res4a_branch2a = layers.Conv2D(256, (3,3), strides=(2,2), name="res4a_branch2a_")(res4a_branch2a_prepadded)
    bn4a_branch2a = layers.BatchNormalization(epsilon=0.000010, name="bn4a_branch2a_")(res4a_branch2a)
    res4a_branch2a_relu = layers.ReLU()(bn4a_branch2a)
    res4a_branch2b_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res4a_branch2a_relu)
    res4a_branch2b = layers.Conv2D(256, (3,3), name="res4a_branch2b_")(res4a_branch2b_prepadded)
    bn4a_branch2b = layers.BatchNormalization(epsilon=0.000010, name="bn4a_branch2b_")(res4a_branch2b)
    res4a_branch1 = layers.Conv2D(256, (1,1), strides=(2,2), name="res4a_branch1_")(res3b_relu)
    bn4a_branch1 = layers.BatchNormalization(epsilon=0.000010, name="bn4a_branch1_")(res4a_branch1)
    res4a = layers.Add()([bn4a_branch2b, bn4a_branch1])
    res4a_relu = layers.ReLU()(res4a)
    res4b_branch2a_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res4a_relu)
    res4b_branch2a = layers.Conv2D(256, (3,3), name="res4b_branch2a_")(res4b_branch2a_prepadded)
    bn4b_branch2a = layers.BatchNormalization(epsilon=0.000010, name="bn4b_branch2a_")(res4b_branch2a)
    res4b_branch2a_relu = layers.ReLU()(bn4b_branch2a)
    res4b_branch2b_prepadded = layers.ZeroPadding2D(padding=((1,1),(1,1)))(res4b_branch2a_relu)
    res4b_branch2b = layers.Conv2D(256, (3,3), name="res4b_branch2b_")(res4b_branch2b_prepadded)
    bn4b_branch2b = layers.BatchNormalization(epsilon=0.000010, name="bn4b_branch2b_")(res4b_branch2b)
    res4b = layers.Add()([bn4b_branch2b, res4a_relu])
    res4b_relu = layers.ReLU()(res4b)
    pool5 = layers.GlobalAveragePooling2D(keepdims=True)(res4b_relu)
    fc1000 = layers.Reshape((-1,), name="fc1000_preFlatten1")(pool5)
    fc1000 = layers.Dense(2, name="fc1000_")(fc1000)

    model = keras.Model(inputs=[data], outputs=[fc1000])
    return model
